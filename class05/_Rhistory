)
#importing this file was different than the first one, because there are
#inconsistensies in how many words there are for a single feature
#use sep (field separator character) to encode a tab (\t) instead of a space
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
ylab= "Features",
xlab="Count",
main="Title"
)
#importing this file was different than the first one, because there are
#inconsistensies in how many words there are for a single feature
#use sep (field separator character) to encode a tab (\t) instead of a space
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
?barplot
par()
par()$mar
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
#height - needs to corelate to count
#las helps to reorient the labels so that they all fit and are readable
#reorient entire bar plot using the horiz argument
par(mar=c(5,20,4,2))
par(mar=c(5,20,4,2))
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
par(mar=c(5,20,4,2))
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
par(mar=c(5,12,4,2))
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene",
col=red
)
# Section 3a: providing color vectors
mf<-read.table("bimm143_05_rstats/male_female_counts.txt", header=TRUE,sep="/t")
# Section 3a: providing color vectors
mf<-read.table("bimm143_05_rstats/male_female_counts.txt", header=TRUE,sep="\t")
View(weight)
View(weight)
View(mf)
View(mf)
barplot(mf$Count)
barplot(mf$Count,
xlab= "Names",
las=2,
ylab="Count",
)
barplot(mf$Count,
xlab= "Names",
las=2,
ylab="Count"
)
barplot(mf$Count,
names.arg=mf$Sample
xlab= "Names",
las=2,
ylab="Count"
)
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count"
)
read.delim()
mfc<- read.delim("bimm143_05_rstats/male_female_counts.txt")
View(mfc)
View(mfc)
#sets it to match a common file format so that you do not have to fill in the arguments
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count"
col=rainbow(10)
)
#sets it to match a common file format so that you do not have to fill in the arguments
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=rainbow(10)
)
rainbow(10)
#sets it to match a common file format so that you do not have to fill in the arguments
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=rainbow(nrow(mf))
)
#different colors for males and females
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=c("blue2","red2"))
#different colors for males and females - only works out because the data is already sorted
# male, female, male, female etc however if you wanted to specifically color males and females
# to specific colors we would need to sort data differently
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=c("blue5","red3"))
#different colors for males and females - only works out because the data is already sorted
# male, female, male, female etc however if you wanted to specifically color males and females
# to specific colors we would need to sort data differently
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=c("blue2","red2"))
#different colors for males and females - only works out because the data is already sorted
# male, female, male, female etc however if you wanted to specifically color males and females
# to specific colors we would need to sort data differently
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=c("pink","purple"))
# Section 3b: coloring by value
ud<-read.delim("bimm143_05_rstats/up_down_expression.txt")
View(ud)
col=c("red","blue","green")
?scatter.smooth
?scatter.smooth
# Section 3b: coloring by value
genes<-read.delim("bimm143_05_rstats/up_down_expression.txt")
View(genes)
table(genes$State)
plot(genes$Condition1,genes$Condition2)
col=topo.colors(nrow(mf))
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=topo.colors(nrow(mf)))
install.packages("colorspace")
plot(genes$Condition1,genes$Condition2, col=genes$State)
#using new color schemes that are from > install.packages("colorspace")
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=burg(nrow(mf)))
#using new color schemes that are from > install.packages("colorspace")
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=sequential)hcl(nrow(mf)))
#using new color schemes that are from > install.packages("colorspace")
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=sequential)hcl(nrow(mf))
col=sequential_hcl(nrow(mf))
#using new color schemes that are from > install.packages("colorspace")
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=sequential_hcl(nrow(mf)))
palette()
levels(genes$State)
palette(c("blue","gray","red"))
plot(genes$Condition1,genes$Condition2, col=genes$State)
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
View(meth)
View(meth)
plot(meth$gene.meth,meth$expression)
nrow(meth$X)
ncol(meth$X)
nrow(meth$X)
?densCols
densCols(meth$gene.meth,meth$expression)
densCols(meth$gene.meth,meth$expression)
genes<-read.delim("bimm143_05_rstats/up_down_expression.txt")
table(genes$State)
palette(c("blue","gray","red"))
plot(genes$Condition1,genes$Condition2, col=genes$State)
source('~/UCSD/bggn213/bggn213_r/class05/class05.R')
colorRampPalette(c("grey","red"))
#' ---
#' title: "BGGN 213 Class 05"
#' author: "Ivy Fernandes"
#' date: "January 25, 2019"
#' ---
#' Class 05 graphics and plots with R
#'
## Class 05 graphics and plots with R
# Section 2a: line plot
weight<- read.table("bimm143_05_rstats/weight_chart.txt", header=TRUE)
plot(weight$Age,weight$Weight,type="b",
pch=15,
cex=1.5,
lwd=2,
ylim=c(2,10),
xlab= "Age (Months)",
ylab="Weight (kg)",
main="Weight Trends by Age")
#b results in both "l"ine and "p"oints
# Section 2b: bar plot
feat<-read.table("bimm143_05_rstats/feature_counts.txt",header=TRUE,sep="\t")
#importing this file was different than the first one, because there are
#inconsistensies in how many words there are for a single feature
#use sep (field separator character) to encode a tab (\t) instead of a space
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
#height - needs to corelate to count
#las helps to reorient the labels so that they all fit and are readable
#reorient entire bar plot using the horiz argument
par(mar=c(5,12,4,2))
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
# Section 3a: providing color vectors
mf<-read.table("bimm143_05_rstats/male_female_counts.txt", header=TRUE,sep="\t")
mfc<- read.delim("bimm143_05_rstats/male_female_counts.txt")
#sets it to match a common file format so that you do not have to fill in the arguments
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=rainbow(nrow(mf))
)
#different colors for males and females - only works out because the data is already sorted
# male, female, male, female etc however if you wanted to specifically color males and females
# to specific colors we would need to sort data differently
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=c("pink","purple"))
#using new color schemes that are pre-loaded
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=topo.colors(nrow(mf)))
#using new color schemes that are from > install.packages("colorspace")
# barplot(mf$Count,
#         names.arg=mf$Sample,
#         xlab= "Names",
#         las=2,
#         ylab="Count",
#         col=sequential_hcl(nrow(mf)))
# Section 3b: coloring by value
genes<-read.delim("bimm143_05_rstats/up_down_expression.txt")
table(genes$State)
palette(c("blue","gray","red"))
plot(genes$Condition1,genes$Condition2, col=genes$State)
# > palette()  <- this was used before setting the palette above to see what colors are default
# [1] "black"   "red"     "green3"  "blue"    "cyan"    "magenta" "yellow"  "gray"
# > levels(genes$State)  <- this was used to see what colors coressponded to which state
# [1] "down"       "unchanging" "up"
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
plot(meth$gene.meth,meth$expression)
colorRampPalette(c("grey","red"))
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
mycols=map.colors(meth$expression, c(max(meth$expression),min(meth$expression)),
colorRampPalette(c("grey","red")))
plot(meth$gene.meth,meth$expression)
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
mycols=map.colors(meth$expression, c(max(meth$expression),min(meth$expression)),
colorRampPalette(c("grey","red")))
plot(meth$promoter.meth,meth$gene.meth,
col=mycols
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
mycols=map.colors(meth$expression,c(max(meth$expression),min(meth$expression)),
colorRampPalette(c("grey","red"))(100))
plot(meth$promoter.meth,meth$gene.meth,
col=mycols)
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
mycols=map.colors(meth$expression,c(max(meth$expression),min(meth$expression)),
colorRampPalette(c("grey","red"))(100))
plot(meth$promoter.meth,meth$gene.meth,
ylab="Gene Methylation",
xlab="Promoter Methylation",
col=mycols)
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
mycols=map.colors(meth$expression,c(max(meth$expression),min(meth$expression)),
colorRampPalette(c("grey","red"))(100))
plot(meth$promoter.meth,meth$gene.meth,
ylab="Gene Methylation",
xlab="Promoter Methylation",
col=mycols)
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
mycols=map.colors(meth$expression,c(max(meth$expression),min(meth$expression)),
colorRampPalette(c("grey","red"))(100))
plot(meth$promoter.meth,meth$gene.meth,
ylab="Gene Methylation",
xlab="Promoter Methylation",
col=mycols)
#' ---
#' title: "BGGN 213 Class 05"
#' author: "Ivy Fernandes"
#' date: "January 25, 2019"
#' ---
#' Class 05 graphics and plots with R
#'
## Class 05 graphics and plots with R
# Section 2a: line plot
weight<- read.table("bimm143_05_rstats/weight_chart.txt", header=TRUE)
plot(weight$Age,weight$Weight,type="b",
pch=15,
cex=1.5,
lwd=2,
ylim=c(2,10),
xlab= "Age (Months)",
ylab="Weight (kg)",
main="Weight Trends by Age")
#b results in both "l"ine and "p"oints
# Section 2b: bar plot
feat<-read.table("bimm143_05_rstats/feature_counts.txt",header=TRUE,sep="\t")
#importing this file was different than the first one, because there are
#inconsistensies in how many words there are for a single feature
#use sep (field separator character) to encode a tab (\t) instead of a space
barplot(feat$Count,
width=2,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
#height - needs to corelate to count
#las helps to reorient the labels so that they all fit and are readable
#reorient entire bar plot using the horiz argument
par(mar=c(5,12,4,2))
#want to set the margins so that we can read the entire feature name
#must recall the plot because it runs it sequentially
barplot(feat$Count,
names.arg=feat$Feature,
las=2,
horiz=TRUE,
xlim=c(0, 90000),
main="Numbers of Features in the Mouse GRCm38 Gene"
)
# Section 3a: providing color vectors
mf<-read.table("bimm143_05_rstats/male_female_counts.txt", header=TRUE,sep="\t")
mfc<- read.delim("bimm143_05_rstats/male_female_counts.txt")
#sets it to match a common file format so that you do not have to fill in the arguments
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=rainbow(nrow(mf))
)
#different colors for males and females - only works out because the data is already sorted
# male, female, male, female etc however if you wanted to specifically color males and females
# to specific colors we would need to sort data differently
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=c("pink","purple"))
#using new color schemes that are pre-loaded
barplot(mf$Count,
names.arg=mf$Sample,
xlab= "Names",
las=2,
ylab="Count",
col=topo.colors(nrow(mf)))
#using new color schemes that are from > install.packages("colorspace")
# barplot(mf$Count,
#         names.arg=mf$Sample,
#         xlab= "Names",
#         las=2,
#         ylab="Count",
#         col=sequential_hcl(nrow(mf)))
# Section 3b: coloring by value
genes<-read.delim("bimm143_05_rstats/up_down_expression.txt")
table(genes$State)
palette(c("blue","gray","red"))
plot(genes$Condition1,genes$Condition2, col=genes$State)
# > palette()  <- this was used before setting the palette above to see what colors are default
# [1] "black"   "red"     "green3"  "blue"    "cyan"    "magenta" "yellow"  "gray"
# > levels(genes$State)  <- this was used to see what colors coressponded to which state
# [1] "down"       "unchanging" "up"
# Section 3c: coloring by point density
meth<-read.delim("bimm143_05_rstats/expression_methylation.txt")
nrow(meth$X)
mycols=map.colors(meth$expression,c(max(meth$expression),min(meth$expression)),
colorRampPalette(c("grey","red"))(100))
plot(meth$promoter.meth,meth$gene.meth,
ylab="Gene Methylation",
xlab="Promoter Methylation",
col=mycols)
